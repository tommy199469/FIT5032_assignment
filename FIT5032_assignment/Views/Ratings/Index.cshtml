@model IEnumerable<FIT5032_assignment.Models.Rating>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<p>Average Score: @ViewBag.AverageScore</p>

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.score)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.GP.ADDRESS)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.score)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.GP.ADDRESS)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>


<canvas id="totalScoreChart" width="200" height="100"></canvas>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <!-- Include Chart.js library -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script type="text/javascript">


    var gpData = @Html.Raw(Json.Encode(ViewBag.GPData));

    var gpNames = [];
    var totalScores = [];

    // Extract GP names and total scores from the gpData
    for (var i = 0; i < gpData.length; i++) {
        gpNames.push(gpData[i].Item1);
        totalScores.push(gpData[i].Item2);
    }

    // Get the canvas element and create a chart
    var ctx = document.getElementById('totalScoreChart').getContext('2d');
    var chart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: gpNames,  // Provide GP names as labels
            datasets: [{
                label: 'Total Scores',
                data: totalScores,  
                backgroundColor: 'RED',
                borderColor: 'BLACK',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
    </script>
}
